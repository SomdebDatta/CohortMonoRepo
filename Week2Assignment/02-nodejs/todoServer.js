/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const uuid = require('uuid');
const bodyParser = require("body-parser");
const fs = require("fs");

const app = express();

app.use(bodyParser.json());

// let all_todos = [
//   {
//     title: "sample_todo",
//     completed: true,
//     description: "This is a sample todo",
//     id: "123"
//   }
// ];

let all_todos = [];

const readingFromFile = (req, res, next) => {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    console.log(`Reading all todos from file...`);
    all_todos = JSON.parse(data);

    res.on("finish", writeToFile);

    next();
  })
}

const writeToFile = () => {
  fs.writeFile("todos.json", JSON.stringify(all_todos), (err) => {
    console.log("Writing all todos...");
  })
}

app.use(readingFromFile);

app.get('/todos', (req, res) => {
  res.status(200).json(all_todos);
});

app.get('/todos/:id', (req, res) => {
  const todo = all_todos.find(t => t.id === req.params.id);
  
  if(!todo) {
    res.status(404).json({Message: "No such todo with the specified id."});
  }
  else {
    res.status(200).json(todo);
  }
})

app.post('/todos', (req, res) => {
  let new_todo = req.body;
  new_todo['id'] = uuid.v4();
  all_todos.push(new_todo);
  res.status(201).json(new_todo);
})

app.put('/todos/:id', (req, res) => {
  let updated_todo = req.body;
  const todo_index = all_todos.findIndex(t => t.id === req.params.id);

  if (todo_index === -1) {
    res.status(404).json({Message: "Todo not found."})
  }
  else {
    all_todos[todo_index].title = updated_todo.title;
    all_todos[todo_index].description = updated_todo.description;
    res.json(updated_todo);
  }
})

app.delete('/todos/:id', (req, res) => {

  const todo_index = all_todos.findIndex(t => t.id === req.params.id);

  if (todo_index === -1) {
    res.status(404).json({Message: "Todo not found."})
  }
  else {
    all_todos.splice(todo_index, 1);
    res.status(200).send("Todo deleted succesfully.");
  }
})

app.all("/todos/*", function(req, res) {
  res.status(404).json({Message: "Saale kuch bhi route mat daal..."});
  return;
})

app.listen(3000);
  
module.exports = app;